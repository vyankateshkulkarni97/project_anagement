{"ast":null,"code":"var _jsxFileName = \"D:\\\\assigment\\\\fronend\\\\src\\\\components\\\\DashboardChart.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardChart = () => {\n  _s();\n  const [chartOptions, setChartOptions] = useState({});\n  useEffect(() => {\n    // Fetch data from your API\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/dashboard/chart');\n        const data = await response.json();\n        console.warn(data);\n        console.warn(data[0].ClosedProjects.values);\n        console.warn(data[1].TotalProjects);\n\n        // Process data and update chartOptions \n        const processedData = processData(data);\n        setChartOptions(processedData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const processData = data => {\n    // Process data to match Highcharts series format\n    // Example structure: [{ name: 'Strategy', data: [14, 19] }, { name: 'Finance', data: [6, 7] }]\n    const processedData = data.map(department => ({\n      name: department.name,\n      data: [department.closedProjects, department.totalProjects]\n    }));\n    // console.warn(processedData);\n    return {\n      chart: {\n        type: 'column'\n      },\n      title: {\n        text: 'Department-wise Success Percentage'\n      },\n      xAxis: {\n        categories: ['Closed Projects', 'Total Projects']\n      },\n      yAxis: {\n        title: {\n          text: 'Percentage'\n        }\n      },\n      series: processedData\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(HighchartsReact, {\n    highcharts: Highcharts,\n    options: chartOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n};\n_s(DashboardChart, \"fv6KnzSiptE7es9ANfZo/pjNm0M=\");\n_c = DashboardChart;\nexport default DashboardChart;\nvar _c;\n$RefreshReg$(_c, \"DashboardChart\");","map":{"version":3,"names":["useEffect","useState","Highcharts","HighchartsReact","jsxDEV","_jsxDEV","DashboardChart","_s","chartOptions","setChartOptions","fetchData","response","fetch","data","json","console","warn","ClosedProjects","values","TotalProjects","processedData","processData","error","map","department","name","closedProjects","totalProjects","chart","type","title","text","xAxis","categories","yAxis","series","highcharts","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/assigment/fronend/src/components/DashboardChart.js"],"sourcesContent":["\r\nimport { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\n\r\nconst DashboardChart = () => {\r\n  const [chartOptions, setChartOptions] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Fetch data from your API\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3001/dashboard/chart');\r\n        const data = await response.json();\r\n        console.warn(data)\r\n        console.warn(data[0].ClosedProjects.values)\r\n        console.warn(data[1].TotalProjects)\r\n\r\n        // Process data and update chartOptions \r\n        const processedData = processData(data);\r\n        \r\n        setChartOptions(processedData);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const processData = (data) => {\r\n    // Process data to match Highcharts series format\r\n    // Example structure: [{ name: 'Strategy', data: [14, 19] }, { name: 'Finance', data: [6, 7] }]\r\n    const processedData = data.map((department) => ({\r\n      name: department.name,\r\n      data: [department.closedProjects, department.totalProjects],\r\n      \r\n    }));\r\n    // console.warn(processedData);\r\n    return {\r\n      chart: {\r\n        type: 'column',\r\n      },\r\n      title: {\r\n        text: 'Department-wise Success Percentage',\r\n      },\r\n      xAxis: {\r\n        categories: ['Closed Projects', 'Total Projects'],\r\n      },\r\n      yAxis: {\r\n        title: {\r\n          text: 'Percentage',\r\n        },\r\n      },\r\n      series: processedData,\r\n    };\r\n  };\r\n\r\n\r\n\r\n  return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\r\n};\r\n\r\nexport default DashboardChart;\r\n"],"mappings":";;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,eAAe,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,CAAC;QACrE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,IAAI,CAACH,IAAI,CAAC;QAClBE,OAAO,CAACC,IAAI,CAACH,IAAI,CAAC,CAAC,CAAC,CAACI,cAAc,CAACC,MAAM,CAAC;QAC3CH,OAAO,CAACC,IAAI,CAACH,IAAI,CAAC,CAAC,CAAC,CAACM,aAAa,CAAC;;QAEnC;QACA,MAAMC,aAAa,GAAGC,WAAW,CAACR,IAAI,CAAC;QAEvCJ,eAAe,CAACW,aAAa,CAAC;MAChC,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDZ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,WAAW,GAAIR,IAAI,IAAK;IAC5B;IACA;IACA,MAAMO,aAAa,GAAGP,IAAI,CAACU,GAAG,CAAEC,UAAU,KAAM;MAC9CC,IAAI,EAAED,UAAU,CAACC,IAAI;MACrBZ,IAAI,EAAE,CAACW,UAAU,CAACE,cAAc,EAAEF,UAAU,CAACG,aAAa;IAE5D,CAAC,CAAC,CAAC;IACH;IACA,OAAO;MACLC,KAAK,EAAE;QACLC,IAAI,EAAE;MACR,CAAC;MACDC,KAAK,EAAE;QACLC,IAAI,EAAE;MACR,CAAC;MACDC,KAAK,EAAE;QACLC,UAAU,EAAE,CAAC,iBAAiB,EAAE,gBAAgB;MAClD,CAAC;MACDC,KAAK,EAAE;QACLJ,KAAK,EAAE;UACLC,IAAI,EAAE;QACR;MACF,CAAC;MACDI,MAAM,EAAEf;IACV,CAAC;EACH,CAAC;EAID,oBAAOf,OAAA,CAACF,eAAe;IAACiC,UAAU,EAAElC,UAAW;IAACmC,OAAO,EAAE7B;EAAa;IAAA8B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3E,CAAC;AAAClC,EAAA,CAxDID,cAAc;AAAAoC,EAAA,GAAdpC,cAAc;AA0DpB,eAAeA,cAAc;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}