{"ast":null,"code":"var _jsxFileName = \"D:\\\\assigment\\\\fronend\\\\src\\\\components\\\\DashboardChart.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardChart = () => {\n  _s();\n  const [chartOptions, setChartOptions] = useState({});\n  useEffect(() => {\n    // Fetch data from your API\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/dashboard/chart');\n        const data = await response.json();\n        console.warn(data);\n        const totalProjectsValue = data[0].TotalProjects; // This will be 22\n\n        // Accessing values at index 1\n        const closedProjectsValue = data[1].ClosedProjects;\n        console.warn(totalProjectsValue);\n        console.warn(closedProjectsValue);\n\n        // Process data and update chartOptions \n        const processedData = processData(data);\n        setChartOptions(processedData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const processData = data => {\n    var _data$find, _data$find2, _data$find3;\n    const totalProjects = ((_data$find = data.find(item => item.TotalProjects)) === null || _data$find === void 0 ? void 0 : _data$find.TotalProjects) || 0;\n    const closedProjects = ((_data$find2 = data.find(item => item.ClosedProjects)) === null || _data$find2 === void 0 ? void 0 : _data$find2.ClosedProjects) || 0;\n    const departmentData = ((_data$find3 = data.find(item => item.departmentResult)) === null || _data$find3 === void 0 ? void 0 : _data$find3.departmentResult) || [];\n\n    // Process data to match Highcharts series format\n    const processedData = departmentData.map(department => ({\n      name: department.Department,\n      data: [totalProjects, closedProjects]\n    }));\n    return {\n      chart: {\n        type: 'column',\n        width: 600,\n        height: 400,\n        marginLeft: 50,\n        // Set the left margin of the chart\n        marginRight: 20\n      },\n      title: {\n        text: 'Department-wise Success Percentage'\n      },\n      xAxis: {\n        categories: ['Closed Projects', 'Total Projects']\n      },\n      yAxis: {\n        title: {\n          text: 'Percentage'\n        }\n      },\n      series: processedData\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(HighchartsReact, {\n    highcharts: Highcharts,\n    options: chartOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 10\n  }, this);\n};\n_s(DashboardChart, \"fv6KnzSiptE7es9ANfZo/pjNm0M=\");\n_c = DashboardChart;\nexport default DashboardChart;\nvar _c;\n$RefreshReg$(_c, \"DashboardChart\");","map":{"version":3,"names":["useEffect","useState","Highcharts","HighchartsReact","jsxDEV","_jsxDEV","DashboardChart","_s","chartOptions","setChartOptions","fetchData","response","fetch","data","json","console","warn","totalProjectsValue","TotalProjects","closedProjectsValue","ClosedProjects","processedData","processData","error","_data$find","_data$find2","_data$find3","totalProjects","find","item","closedProjects","departmentData","departmentResult","map","department","name","Department","chart","type","width","height","marginLeft","marginRight","title","text","xAxis","categories","yAxis","series","highcharts","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/assigment/fronend/src/components/DashboardChart.js"],"sourcesContent":["\r\nimport { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\n\r\nconst DashboardChart = () => {\r\n  const [chartOptions, setChartOptions] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Fetch data from your API\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3001/dashboard/chart');\r\n        const data = await response.json();\r\n        console.warn(data)\r\n        const totalProjectsValue = data[0].TotalProjects; // This will be 22\r\n\r\n        // Accessing values at index 1\r\n        const closedProjectsValue = data[1].ClosedProjects;\r\n        console.warn(totalProjectsValue)\r\n        console.warn(closedProjectsValue)\r\n\r\n        // Process data and update chartOptions \r\n        const processedData = processData(data);\r\n\r\n        setChartOptions(processedData);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const processData = (data) => {\r\n    const totalProjects = data.find(item => item.TotalProjects)?.TotalProjects || 0;\r\n    const closedProjects = data.find(item => item.ClosedProjects)?.ClosedProjects || 0;\r\n\r\n    const departmentData = data.find(item => item.departmentResult)?.departmentResult || [];\r\n\r\n    // Process data to match Highcharts series format\r\n    const processedData = departmentData.map((department) => ({\r\n      name: department.Department,\r\n      data: [totalProjects, closedProjects],\r\n    }));\r\n\r\n    return {\r\n      chart: {\r\n        type: 'column',\r\n        width: 600, \r\n        height: 400, \r\n        marginLeft: 50, // Set the left margin of the chart\r\n        marginRight: 20,\r\n      },\r\n      title: {\r\n        text: 'Department-wise Success Percentage',\r\n      },\r\n      xAxis: {\r\n        categories: ['Closed Projects', 'Total Projects'],\r\n      },\r\n      yAxis: {\r\n        title: {\r\n          text: 'Percentage',\r\n        },\r\n      },\r\n      series: processedData,\r\n    };\r\n  };\r\n\r\n\r\n\r\n  return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\r\n};\r\n\r\nexport default DashboardChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}