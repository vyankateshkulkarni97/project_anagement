{"ast":null,"code":"var _s = $RefreshSig$();\n// DashboardChart.js\n\nimport { useEffect, useState } from 'react';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n\nconst DashboardChart = () => {\n  _s();\n  //   const [chartOptions, setChartOptions] = useState({});\n\n  useEffect(() => {\n    // Fetch data from your API\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/api/projects/department-success');\n        const data = await response.json();\n\n        // Process data and update chartOptions\n        const processedData = processData(data);\n        setChartOptions(processedData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const processData = data => {\n    // Process data to match Highcharts series format\n    // Example structure: [{ name: 'Strategy', data: [14, 19] }, { name: 'Finance', data: [6, 7] }]\n    const processedData = data.map(department => ({\n      name: department.name,\n      data: [department.closedProjects, department.totalProjects]\n    }));\n    return {\n      chart: {\n        type: 'column'\n      },\n      title: {\n        text: 'Department-wise Success Percentage'\n      },\n      xAxis: {\n        categories: ['Closed Projects', 'Total Projects']\n      },\n      yAxis: {\n        title: {\n          text: 'Percentage'\n        }\n      },\n      series: processedData\n    };\n  };\n\n  //   return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n};\n_s(DashboardChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = DashboardChart;\nexport default DashboardChart;\nvar _c;\n$RefreshReg$(_c, \"DashboardChart\");","map":{"version":3,"names":["useEffect","useState","DashboardChart","_s","fetchData","response","fetch","data","json","processedData","processData","setChartOptions","error","console","map","department","name","closedProjects","totalProjects","chart","type","title","text","xAxis","categories","yAxis","series","_c","$RefreshReg$"],"sources":["D:/assigment/fronend/src/components/DashboardChart.js"],"sourcesContent":["// DashboardChart.js\r\n\r\nimport { useEffect, useState } from 'react';\r\n// import Highcharts from 'highcharts';\r\n// import HighchartsReact from 'highcharts-react-official';\r\n\r\nconst DashboardChart = () => {\r\n//   const [chartOptions, setChartOptions] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Fetch data from your API\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('/api/projects/department-success');\r\n        const data = await response.json();\r\n\r\n        // Process data and update chartOptions\r\n        const processedData = processData(data);\r\n        setChartOptions(processedData);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const processData = (data) => {\r\n    // Process data to match Highcharts series format\r\n    // Example structure: [{ name: 'Strategy', data: [14, 19] }, { name: 'Finance', data: [6, 7] }]\r\n    const processedData = data.map((department) => ({\r\n      name: department.name,\r\n      data: [department.closedProjects, department.totalProjects],\r\n    }));\r\n\r\n    return {\r\n      chart: {\r\n        type: 'column',\r\n      },\r\n      title: {\r\n        text: 'Department-wise Success Percentage',\r\n      },\r\n      xAxis: {\r\n        categories: ['Closed Projects', 'Total Projects'],\r\n      },\r\n      yAxis: {\r\n        title: {\r\n          text: 'Percentage',\r\n        },\r\n      },\r\n      series: processedData,\r\n    };\r\n  };\r\n\r\n//   return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\r\n};\r\n\r\nexport default DashboardChart;\r\n"],"mappings":";AAAA;;AAEA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C;AACA;;AAEA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B;;EAEEH,SAAS,CAAC,MAAM;IACd;IACA,MAAMI,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;QAChE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAElC;QACA,MAAMC,aAAa,GAAGC,WAAW,CAACH,IAAI,CAAC;QACvCI,eAAe,CAACF,aAAa,CAAC;MAChC,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDR,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,WAAW,GAAIH,IAAI,IAAK;IAC5B;IACA;IACA,MAAME,aAAa,GAAGF,IAAI,CAACO,GAAG,CAAEC,UAAU,KAAM;MAC9CC,IAAI,EAAED,UAAU,CAACC,IAAI;MACrBT,IAAI,EAAE,CAACQ,UAAU,CAACE,cAAc,EAAEF,UAAU,CAACG,aAAa;IAC5D,CAAC,CAAC,CAAC;IAEH,OAAO;MACLC,KAAK,EAAE;QACLC,IAAI,EAAE;MACR,CAAC;MACDC,KAAK,EAAE;QACLC,IAAI,EAAE;MACR,CAAC;MACDC,KAAK,EAAE;QACLC,UAAU,EAAE,CAAC,iBAAiB,EAAE,gBAAgB;MAClD,CAAC;MACDC,KAAK,EAAE;QACLJ,KAAK,EAAE;UACLC,IAAI,EAAE;QACR;MACF,CAAC;MACDI,MAAM,EAAEjB;IACV,CAAC;EACH,CAAC;;EAEH;AACA,CAAC;AAACN,EAAA,CAjDID,cAAc;AAAAyB,EAAA,GAAdzB,cAAc;AAmDpB,eAAeA,cAAc;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}