{"ast":null,"code":"var _jsxFileName = \"D:\\\\assigment\\\\fronend\\\\src\\\\components\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const history = useHistory();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const handleLogin = () => {\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      setError('Invalid email format');\n      return;\n    }\n\n    // Validate non-empty fields\n    if (!email || !password) {\n      setError('Email and password are required');\n      return;\n    }\n\n    // Fetch user details from the database (replace this with your actual implementation)\n    const isValidUser = validateUserFromDatabase(email, password);\n    if (isValidUser) {\n      // Navigate to the dashboard\n      history.push('/dashboard');\n    } else {\n      setError('Invalid user');\n    }\n  };\n  const validateUserFromDatabase = (email, password) => {\n    // Replace this with your actual logic to validate user details from the database\n    // For simplicity, returning true for any email and password combination\n    return true;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Email:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: email,\n        onChange: e => setEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"v9rGdWGHgaBYu5+Z/uJjvF+3xR8=\", false, function () {\n  return [useHistory];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useHistory","jsxDEV","_jsxDEV","Login","_s","history","email","setEmail","password","setPassword","error","setError","handleLogin","emailRegex","test","isValidUser","validateUserFromDatabase","push","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/assigment/fronend/src/components/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n  const history = useHistory();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleLogin = () => {\r\n    // Validate email format\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      setError('Invalid email format');\r\n      return;\r\n    }\r\n\r\n    // Validate non-empty fields\r\n    if (!email || !password) {\r\n      setError('Email and password are required');\r\n      return;\r\n    }\r\n\r\n    // Fetch user details from the database (replace this with your actual implementation)\r\n    const isValidUser = validateUserFromDatabase(email, password);\r\n\r\n    if (isValidUser) {\r\n      // Navigate to the dashboard\r\n      history.push('/dashboard');\r\n    } else {\r\n      setError('Invalid user');\r\n    }\r\n  };\r\n\r\n  const validateUserFromDatabase = (email, password) => {\r\n    // Replace this with your actual logic to validate user details from the database\r\n    // For simplicity, returning true for any email and password combination\r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login Page</h1>\r\n      <div>\r\n        <label>Email:</label>\r\n        <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n      </div>\r\n      <div>\r\n        <label>Password:</label>\r\n        <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n      </div>\r\n      <button onClick={handleLogin}>Login</button>\r\n      {error && <p>{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}