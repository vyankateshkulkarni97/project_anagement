{"ast":null,"code":"var _jsxFileName = \"D:\\\\assigment\\\\fronend\\\\src\\\\components\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardChart = () => {\n  _s();\n  const [chartOptions, setChartOptions] = useState({});\n  useEffect(() => {\n    // Fetch data from your API\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/dashboard/chart');\n        const data = await response.json();\n\n        // Process data and update chartOptions \n        const processedData = processData(data);\n        setChartOptions(processedData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const processData = data => {\n    var _data$, _data$2, _data$3;\n    const totalProjects = ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.TotalProjects) || 0;\n    const closedProjects = ((_data$2 = data[1]) === null || _data$2 === void 0 ? void 0 : _data$2.ClosedProjects) || 0;\n    const departmentData = ((_data$3 = data[2]) === null || _data$3 === void 0 ? void 0 : _data$3.departmentResult) || [];\n\n    // Process data to match Highcharts series format\n    const processedData = departmentData.map(department => ({\n      name: department.Department,\n      data: [totalProjects, closedProjects]\n    }));\n    const chartConfig = {\n      chart: {\n        type: 'column',\n        width: 1200,\n        height: 600,\n        marginLeft: -20,\n        marginRight: -40\n      },\n      title: {\n        text: 'Department-wise Success Percentage'\n      },\n      xAxis: {\n        categories: ['Closed Projects', 'Total Projects']\n      },\n      yAxis: {\n        title: {\n          text: 'Percentage'\n        }\n      },\n      series: processedData\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(HighchartsReact, {\n        highcharts: Highcharts,\n        options: chartConfig\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  };\n  return chartOptions;\n};\n_s(DashboardChart, \"fv6KnzSiptE7es9ANfZo/pjNm0M=\");\n_c = DashboardChart;\nexport default DashboardChart;\nvar _c;\n$RefreshReg$(_c, \"DashboardChart\");","map":{"version":3,"names":["React","useEffect","useState","Highcharts","HighchartsReact","jsxDEV","_jsxDEV","DashboardChart","_s","chartOptions","setChartOptions","fetchData","response","fetch","data","json","processedData","processData","error","console","_data$","_data$2","_data$3","totalProjects","TotalProjects","closedProjects","ClosedProjects","departmentData","departmentResult","map","department","name","Department","chartConfig","chart","type","width","height","marginLeft","marginRight","title","text","xAxis","categories","yAxis","series","className","children","highcharts","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/assigment/fronend/src/components/Home.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nconst DashboardChart = () => {\r\n  const [chartOptions, setChartOptions] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Fetch data from your API\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3001/dashboard/chart');\r\n        const data = await response.json();\r\n\r\n        // Process data and update chartOptions \r\n        const processedData = processData(data);\r\n\r\n        setChartOptions(processedData);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const processData = (data) => {\r\n    const totalProjects = data[0]?.TotalProjects || 0;\r\n    const closedProjects = data[1]?.ClosedProjects || 0;\r\n\r\n    const departmentData = data[2]?.departmentResult || [];\r\n\r\n    // Process data to match Highcharts series format\r\n    const processedData = departmentData.map((department) => ({\r\n      name: department.Department,\r\n      data: [totalProjects, closedProjects],\r\n    }));\r\n\r\n    const chartConfig = {\r\n      chart: {\r\n        type: 'column',\r\n        width: 1200,\r\n        height: 600,\r\n        marginLeft: -20,\r\n        marginRight: -40,\r\n      },\r\n      title: {\r\n        text: 'Department-wise Success Percentage',\r\n      },\r\n      xAxis: {\r\n        categories: ['Closed Projects', 'Total Projects'],\r\n      },\r\n      yAxis: {\r\n        title: {\r\n          text: 'Percentage',\r\n        },\r\n      },\r\n      series: processedData,\r\n    };\r\n\r\n    return (\r\n      <div className=\"chart-container\">\r\n        <HighchartsReact highcharts={Highcharts} options={chartConfig} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return chartOptions;\r\n};\r\n\r\nexport default DashboardChart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,eAAe,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,CAAC;QACrE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAElC;QACA,MAAMC,aAAa,GAAGC,WAAW,CAACH,IAAI,CAAC;QAEvCJ,eAAe,CAACM,aAAa,CAAC;MAChC,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDP,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,WAAW,GAAIH,IAAI,IAAK;IAAA,IAAAM,MAAA,EAAAC,OAAA,EAAAC,OAAA;IAC5B,MAAMC,aAAa,GAAG,EAAAH,MAAA,GAAAN,IAAI,CAAC,CAAC,CAAC,cAAAM,MAAA,uBAAPA,MAAA,CAASI,aAAa,KAAI,CAAC;IACjD,MAAMC,cAAc,GAAG,EAAAJ,OAAA,GAAAP,IAAI,CAAC,CAAC,CAAC,cAAAO,OAAA,uBAAPA,OAAA,CAASK,cAAc,KAAI,CAAC;IAEnD,MAAMC,cAAc,GAAG,EAAAL,OAAA,GAAAR,IAAI,CAAC,CAAC,CAAC,cAAAQ,OAAA,uBAAPA,OAAA,CAASM,gBAAgB,KAAI,EAAE;;IAEtD;IACA,MAAMZ,aAAa,GAAGW,cAAc,CAACE,GAAG,CAAEC,UAAU,KAAM;MACxDC,IAAI,EAAED,UAAU,CAACE,UAAU;MAC3BlB,IAAI,EAAE,CAACS,aAAa,EAAEE,cAAc;IACtC,CAAC,CAAC,CAAC;IAEH,MAAMQ,WAAW,GAAG;MAClBC,KAAK,EAAE;QACLC,IAAI,EAAE,QAAQ;QACdC,KAAK,EAAE,IAAI;QACXC,MAAM,EAAE,GAAG;QACXC,UAAU,EAAE,CAAC,EAAE;QACfC,WAAW,EAAE,CAAC;MAChB,CAAC;MACDC,KAAK,EAAE;QACLC,IAAI,EAAE;MACR,CAAC;MACDC,KAAK,EAAE;QACLC,UAAU,EAAE,CAAC,iBAAiB,EAAE,gBAAgB;MAClD,CAAC;MACDC,KAAK,EAAE;QACLJ,KAAK,EAAE;UACLC,IAAI,EAAE;QACR;MACF,CAAC;MACDI,MAAM,EAAE7B;IACV,CAAC;IAED,oBACEV,OAAA;MAAKwC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,eAC9BzC,OAAA,CAACF,eAAe;QAAC4C,UAAU,EAAE7C,UAAW;QAAC8C,OAAO,EAAEhB;MAAY;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC;EAEV,CAAC;EAED,OAAO5C,YAAY;AACrB,CAAC;AAACD,EAAA,CAhEID,cAAc;AAAA+C,EAAA,GAAd/C,cAAc;AAkEpB,eAAeA,cAAc;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}